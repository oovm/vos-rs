@export
VosParser = {statements:VosStatementNode} $;

VosStatementNode =
	@:TableDeclareNode |
	@:StructDeclareNode |
	@:ObjectStatementNode |
	@:UnionStatementNode |
	@:Split;

@position
TableDeclareNode = TableDeclare id:IdentifierNode '{' {body:DeclareBodyNode} '}';
TableDeclare = 'table';

@position
StructDeclareNode = StructDeclare id:IdentifierNode '{' {body:DeclareBodyNode} '}';
StructDeclare = 'class' | 'struct' | 'structure';

@position
DefineStatementNode = DefineDeclare id:IdentifierNode '{' {body:DeclareBodyNode} '}';
DefineDeclare = 'def' | 'define' | 'fn' | 'fun' | 'function';

@position
UnionStatementNode = UnionDeclare id:IdentifierNode '{' {body:UnionBodyNode} '}';
UnionDeclare = 'union' | "enum" | 'enumerate' | 'tagged';

@position
ObjectStatementNode = ObjectDeclare id:IdentifierNode '=' value:ValueNode;
ObjectDeclare = 'let' | "var" | 'const' | 'object';

DeclareBodyNode = @:ConstraintStatementNode | @:FieldStatementNode | @:Split;

UnionBodyNode = id:IdentifierNode ['=' n:ValueNode];

@position
FieldStatementNode = key:KeyNode ':' type:TypeValueNode ['=' value:ValueNode];



@position
TypeValueNode = name:NamespaceNode [ '[' generic:GenericNode ']' ];

GenericNode =
	@:GenericNum1 |
	@:GenericNum2 |
	@:GenericNum3 |
	@:NamespaceNode
	;

GenericNum1 = token:GenericNum1Token num:NumNode;
GenericNum2 = num1:NumNode token:GenericNum2Token num2:NumNode;
GenericNum3 = num1:NumNode token1:GenericNum1Token IdentifierNode token2:GenericNum1Token num2:NumNode;

@position @string
GenericNum1Token = '<=' | '>=' | '≤' | '≥' | '⩽' | '⩾' | '<' | '>' | '=';
@position @string
GenericNum2Token = '..=' | '..<';


@position
ConstraintStatementNode = '^' key:KeyNode [':' value:ValueNode];

@position
KeyNode = @:IdentifierNode | @:NumNode;

ValueNode =
	@:DictNode |
	@:ListNode |
	@:SpecialNode |
	@:NumNode |
	@:NamespaceNode
	;

@position
DictNode = '{' {items:DictItem} '}' ;

DictItem = @:KeyValueNode | @:Split;

KeyValueNode = key:KeyNode ':' value:ValueNode;


@position
ListNode =
	'[' {items:ListItem} ']' |
	'{' {items:ListItem} '}' ;

ListItem = @:ValueNode | @:Split;



@string
@position
@no_skip_ws
NumNode = {'0'..'9'}+ [Dot {'0'..'9'}+];

@position
@string
ModifierNode = IdentifierNode !('{'|'[');

@position
NamespaceNode = path:IdentifierNode {(Dot | '::') path:IdentifierNode};

@string
@position
@no_skip_ws
IdentifierNode = (XID_START | '_') {XID_CONTINUE};

@string
@position
SpecialNode = 'null' | 'default' | 'true' | 'false';


@char
@check(unicode_ident::is_xid_start)
XID_START = char;

@char
@check(unicode_ident::is_xid_continue)
XID_CONTINUE = char;

@char
Dot = '.' | '。';

@char
Split = ';' | ',' | '，';